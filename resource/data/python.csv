	title	author	date	url	text	comment_count	fullname	type	co_authors	api_index
0	Sunday Daily Thread: What's everyone working on this week?	Unknown	2023-12-31 00:00:09	https://www.reddit.com/r/Python/comments/18utrn3/sunday_daily_thread_whats_everyone_working_on/	# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to! ## How it Works: 1. **Show & Tell**: Share your current projects, completed works, or future ideas. 2. **Discuss**: Get feedback, find collaborators, or just chat about your project. 3. **Inspire**: Your project might inspire someone else, just as you might get inspired here. ## Guidelines: * Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome. * Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here. ## Example Shares: 1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate! 2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better. 3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier! Let's build and grow together! Share your journey and learn from others. Happy coding! üåü	<praw.models.comment_forest.CommentForest object at 0x11789a020>	t3_18utrn3	reddit		
1	Saturday Daily Thread: Resource Request and Sharing! Daily Thread	Unknown	2024-01-06 00:00:18	https://www.reddit.com/r/Python/comments/18zlr3i/saturday_daily_thread_resource_request_and/	"# Weekly Thread: Resource Request and Sharing üìö Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread! ## How it Works: 1. **Request**: Can't find a resource on a particular topic? Ask here! 2. **Share**: Found something useful? Share it with the community. 3. **Review**: Give or get opinions on Python resources you've used. ## Guidelines: * Please include the type of resource (e.g., book, video, article) and the topic. * Always be respectful when reviewing someone else's shared resource. ## Example Shares: 1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms. 2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures. 3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators. ## Example Requests: 1. **Looking for**: Video tutorials on web scraping with Python. 2. **Need**: Book recommendations for Python machine learning. Share the knowledge, enrich the community. Happy learning! üåü"	<praw.models.comment_forest.CommentForest object at 0x11793d420>	t3_18zlr3i	reddit		
2	How to write a python decorator (and why)	Unknown	2024-01-06 11:19:32	https://www.reddit.com/r/Python/comments/18zxxak/how_to_write_a_python_decorator_and_why/	tldr; Decorators are a nice way to wrap functions in other functions and re-use code [https://www.jaredbwelch.com/blog/How\_to\_write\_a\_python\_decorator\_and\_why](https://www.jaredbwelch.com/blog/How_to_write_a_python_decorator_and_why)	<praw.models.comment_forest.CommentForest object at 0x11793d720>	t3_18zxxak	reddit		
3	One billion row challenge	Unknown	2024-01-05 21:23:44	https://www.reddit.com/r/Python/comments/18zi0o5/one_billion_row_challenge/	Just saw this repo trending and thought of doing this in different languages, e.g. Python. [https://github.com/gunnarmorling/1brc](https://github.com/gunnarmorling/1brc) Do you know if it's already available?	<praw.models.comment_forest.CommentForest object at 0x117980c40>	t3_18zi0o5	reddit		
4	Ubisoft Interview Task - Build a RestAPI Containing Docker Metrics	Unknown	2024-01-06 15:09:30	https://www.reddit.com/r/Python/comments/1901z7a/ubisoft_interview_task_build_a_restapi_containing/	This is a task I had to do when I had applied to Ubisoft about 3 years ago for their interview process. The job I had applied to at the time was DevOps for their MaaS team. I've included the task as well as my completed code with documentation. Being that the task was given 3 years ago, I can only assume that they have changed their challenge ever since. &#x200B; https://github.com/mrsaintj-corp/ubisoft\_interview	<praw.models.comment_forest.CommentForest object at 0x117982b30>	t3_1901z7a	reddit		
5	Excel file in python	Unknown	2024-01-06 08:03:34	https://www.reddit.com/r/Python/comments/18zv2ax/excel_file_in_python/	I have excel file with audio and image files. I have managed to extract image and other texts and save it on database but audio file is giving me trouble. Its giving me null value, i have tried ole, pydub etc methods all of those give me same result. Anyone here with suggestion or solution??	<praw.models.comment_forest.CommentForest object at 0x117982e30>	t3_18zv2ax	reddit		
6	Python Docker Monitor to test my skills	Unknown	2024-01-06 13:52:58	https://www.reddit.com/r/Python/comments/1900fxe/python_docker_monitor_to_test_my_skills/	Hi everyone, I'm excited to share a project I've been working on to get back into development after a two-year hiatus. I'd love to get your feedback on it! I'd like to get back as a dev but I'm not sure I'm capable. [repo link](https://github.com/smscarano/docker_monitor)	<praw.models.comment_forest.CommentForest object at 0x1179837f0>	t3_1900fxe	reddit		
7	"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course. (Jan 2024)"	"Author of ""Automate the Boring Stuff"""	2024-01-05 21:51:36	https://www.reddit.com/r/Python/comments/18ziobn/2000_free_sign_ups_available_for_the_automate_the/	"If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): https://udemy.com/course/automate/?couponCode=JAN2024FREE https://udemy.com/course/automate/?couponCode=JAN2024FREE2 If you are reading this after the sign ups are used up, you can always find [the first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW) YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have ""preview"" turned on. Scroll down to find and click ""Expand All Sections"" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos. **NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.** **I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1) **Frequently Asked Questions:** (*read this before posting questions*) * This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules. * If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace. * This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com * The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/ * I do plan on updating the Udemy course, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course. * It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read. * **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.** * Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies"	<praw.models.comment_forest.CommentForest object at 0x117983b20>	t3_18ziobn	reddit		
8	MiniFirehose - A lightweight data buffering and delivery system	Unknown	2024-01-06 14:10:55	https://www.reddit.com/r/Python/comments/1900se3/minifirehose_a_lightweight_data_buffering_and/	Hi everyone! I wanted to share a project I made in just a week. It's called MiniFirehose (somewhat similar to AWS Firehose). It's a really simple tool for managing data, kind of like Kafka or MQTT but much easier to use and lighter on resources. With MiniFirehose, you can collect messages and send them to places like your local filesystem or Amazon S3. It's not complicated to set up, and it's great if you're working on something small and don't need a big system. Since I made it pretty quickly, there might be some small bugs. If you try it and have any ideas on how to make it better, I'd love to hear from you. Or, if you know other tools like this, let me know! so I don't spend much time on it. You can check it out here: \[[mini-firehose](https://github.com/waqar-ahmed/mini-firehose)\]. I'm looking forward to hearing what you think! Thanks!	<praw.models.comment_forest.CommentForest object at 0x117983c40>	t3_1900se3	reddit		
9	FlaskyLMS - A Simple Leave Management System in Flask with Google Calendar Integration	Unknown	2024-01-06 11:30:19	https://www.reddit.com/r/Python/comments/18zy385/flaskylms_a_simple_leave_management_system_in/	A simple leave management tool that I built for myself a while ago. Now sharing on GitHub. Not the most pretty looking and lacks many bells and whistles but still gets the main job done xD * User-friendly leave request process: Employees can easily submit leave requests through a simple and intuitive interface. * Admin approval and rejection: Admins can review leave requests, approve or reject them, and provide feedback if needed. * Email notifications: Both employees and admins receive timely email notifications for new requests, approvals, and rejections. * Google Calendar integration: Approved leaves are automatically added as events to the admin's Google Calendar, ensuring visibility. Try or give your feedback: https://github.com/Suleman-Elahi/FlaskyLMS	<praw.models.comment_forest.CommentForest object at 0x117983e50>	t3_18zy385	reddit		
10	Egg-smol Python: A Pythonic Library for E-graphs	Saul Shanabrook	2023-05-07 15:35:17	http://arxiv.org/abs/2305.04311v1	E-graphs have emerged as a versatile data structure with applications in synthesis, optimization, and verification through techniques such as equality saturation. This paper introduces Python bindings for the experimental egg-smol library, which aims to bring the benefits of e-graphs to the Python ecosystem. The bindings offer a high-level, Pythonic API providing an accessible and familiar interface for Python users. By integrating e-graph techniques with Python, we hope to enable collaboration and innovation across various domains in the scientific computing and machine learning communities. We discuss the advantages of using Python bindings for both Python and existing egg-smol users, as well as possible future directions for development.			arxiv	[]	0.0
11	Making Python Code Idiomatic by Automatic Refactoring Non-Idiomatic Python Code with Pythonic Idioms	Zejun Zhang	2022-07-12 15:30:46	http://arxiv.org/abs/2207.05613v1	Compared to other programming languages (e.g., Java), Python has more idioms to make Python code concise and efficient. Although pythonic idioms are well accepted in the Python community, Python programmers are often faced with many challenges in using them, for example, being unaware of certain pythonic idioms or do not know how to use them properly. Based on an analysis of 7,638 Python repositories on GitHub, we find that non-idiomatic Python code that can be implemented with pythonic idioms occurs frequently and widely. Unfortunately, there is no tool for automatically refactoring such non-idiomatic code into idiomatic code. In this paper, we design and implement an automatic refactoring tool to make Python code idiomatic. We identify nine pythonic idioms by systematically contrasting the abstract syntax grammar of Python and Java. Then we define the syntactic patterns for detecting non-idiomatic code for each pythonic idiom. Finally, we devise atomic AST-rewriting operations and refactoring steps to refactor non-idiomatic code into idiomatic code. We test and review over 4,115 refactorings applied to 1,065 Python projects from GitHub, and submit 90 pull requests for the 90 randomly sampled refactorings to 84 projects. These evaluations confirm the high-accuracy, practicality and usefulness of our refactoring tool on real-world Python code. Our refactoring tool can be accessed at 47.242.131.128:5000.			arxiv	['Zhenchang Xing', 'Xin Xia', 'Xiwei Xu', 'Liming Zhu']	1.0
12	Modern Python at the Large Synoptic Survey Telescope	Tim Jenness	2017-12-01 19:04:46	http://arxiv.org/abs/1712.00461v1	The LSST software systems make extensive use of Python, with almost all of it initially being developed solely in Python 2. Since LSST will be commissioned when Python 2 is end-of-lifed it is critical that we have all our code support Python 3 before commissioning begins. Over the past year we have made significant progress in migrating the bulk of the code from the Data Management system onto Python 3. This paper presents our migration methodology, and the current status of the port, with our eventual aim to be running completely on Python 3 by early 2018. We also discuss recent modernizations to our Python codebase.			arxiv	[]	2.0
13	Python GUI Scripting Interface for Running Atomic Physics Applications	Amani Tahat	2011-06-05 01:11:08	http://arxiv.org/abs/1106.0868v1	We create a Python GUI scripting interface working under Windows in addition to (UNIX/Linux). The GUI has been built around the Python open-source programming language. We use the Python's GUI library that so called Python Mega Widgets (PMW) and based on Tkinter Python module (http://www.freenetpages.co.uk/hp/alan.gauld/tutgui.htm). The new GUI was motivated primarily by the desire of more updated operations, more flexibility incorporating future and current improvements in producing atomic data. Furthermore it will be useful for a variety of applications of atomic physics, plasma physics and astrophysics and will help in calculating various atomic properties.			arxiv	['Mofleh Tahat']	3.0
14	Towards Memory Safe Python Enclave for Security Sensitive Computation	Huibo Wang	2020-05-12 18:19:08	http://arxiv.org/abs/2005.05996v1	Intel SGX Guard eXtensions (SGX), a hardware-supported trusted execution environment (TEE), is designed to protect security-sensitive applications. However, since enclave applications are developed with memory unsafe languages such as C/C++, traditional memory corruption is not eliminated in SGX. Rust-SGX is the first toolkit providing enclave developers with a memory-language. However, Rust is considered a Systems language and has become the right choice for concurrent applications and web browsers. Many application domains such as Big Data, Machine Learning, Robotics, Computer Vision are more commonly developed in the python programming language. Therefore, Python application developers cannot benefit from secure enclaves like Intel SGX and rust-SGX. To fill this gap, we propose Python-SGX, which is a memory-safe SGX SDK providing enclave developers a memory-safe Python development environment. The key idea is to enable memory-safe Python language in SGX by solving the following key challenges: (1) defining a memory-safe Python interpreter (2)replacing unsafe elements of Python interpreter with safe ones,(3) achieving comparable performance to non-enclave Python applications, and (4) not introducing any unsafe new code or libraries into SGX. We propose to build Python-SGX with PyPy, a Python interpreter written by RPython, which is a subset of Python, and tame unsafe parts in PyPy by formal verification, security hardening, and memory safe language. We have implemented python-SGX and tested it with a series of benchmarks programs. Our evaluation results show that Python-SGX does not cause significant overhead.			arxiv	['Mingshen Sun', 'Qian Feng', 'Pei Wang', 'Tongxin Li', 'Yu Ding']	4.0
15	Porting the LSST Data Management Pipeline Software to Python 3	Tim Jenness	2016-11-02 19:48:34	http://arxiv.org/abs/1611.00751v1	The LSST data management science pipelines software consists of more than 100,000 lines of Python 2 code. LSST operations will begin after support for Python 2 has been dropped by the Python community in 2020, and we must therefore plan to migrate the codebase to Python 3. During the transition period we must also support our community of active Python 2 users and this complicates the porting significantly. We have decided to use the Python future package as the basis for our port to enable support for Python 2 and Python 3 simultaneously, whilst developing with a mindset more suited to Python 3. In this paper we report on the current status of the port and the difficulties that have been encountered.			arxiv	[]	5.0
16	A general approach for running Python codes in OpenFOAM using an embedded pybind11 Python interpreter	Simon Rodriguez	2022-03-30 15:25:03	http://arxiv.org/abs/2203.16394v1	As the overlap between traditional computational mechanics and machine learning grows, there is an increasing demand for straight-forward approaches to interface Python-based procedures with C++-based OpenFOAM. This article introduces one such general methodology, allowing the execution of Python code directly within an OpenFOAM solver without the need for Python code translation. The proposed approach is based on the lightweight library pybind11, where OpenFOAM data is transferred to an embedded Python interpreter for manipulation, and results are returned as needed. Following a review of related approaches, the article describes the approach, with a particular focus on data transfer between Python and OpenFOAM, executing Python scripts and functions, and practical details about the implementation in OpenFOAM. Three complementary test cases are presented to highlight the functionality and demonstrate the effect of different data transfer approaches: a Python-based velocity profile boundary condition; a Python-based solver for prototyping; and a machine learning mechanical constitutive law class for solids4foam which performs field calculations.			arxiv	['Philip Cardiff']	6.0
17	Python for education: the exact cover problem	Andrzej Kapanowski	2010-10-28 08:53:26	http://arxiv.org/abs/1010.5890v1	Python implementation of Algorithm X by Knuth is presented. Algorithm X finds all solutions to the exact cover problem. The exemplary results for pentominoes, Latin squares and Sudoku are given.			arxiv	[]	7.0
18	Teddy: Automatic Recommendation of Pythonic Idiom Usage For Pull-Based Software Projects	Purit Phan-udom	2020-09-05 12:54:57	http://arxiv.org/abs/2009.03302v1	Pythonic code is idiomatic code that follows guiding principles and practices within the Python community. Offering performance and readability benefits, Pythonic code is claimed to be widely adopted by experienced Python developers, but can be a learning curve to novice programmers. To aid with Pythonic learning, we create an automated tool, called Teddy, that can help checking the Pythonic idiom usage. The tool offers a prevention mode with Just-In-Time analysis to recommend the use of Pythonic idiom during code review and a detection mode with historical analysis to run a thorough scan of idiomatic and non-idiomatic code. In this paper, we first describe our tool and an evaluation of its performance. Furthermore, we present a case study that demonstrates how to use Teddy in a real-life scenario on an Open Source project. An evaluation shows that Teddy has high precision for detecting Pythonic idiom and non-Pythonic code. Using interactive visualizations, we demonstrate how novice programmers can navigate and identify Pythonic idiom and non-Pythonic code in their projects. Our video demo with the full interactive visualizations is available at https://youtu.be/vOCQReSvBxA.			arxiv	['Naruedon Wattanakul', 'Tattiya Sakulniwat', 'Chaiyong Ragkhitwetsagul', 'Thanwadee Sunetnanta', 'Morakot Choetkiertikul', 'Raula Gaikovina Kula']	8.0
19	Machine Learning using Stata/Python	Giovanni Cerulli	2021-03-03 10:31:44	http://arxiv.org/abs/2103.03122v1	We present two related Stata modules, r_ml_stata and c_ml_stata, for fitting popular Machine Learning (ML) methods both in regression and classification settings. Using the recent Stata/Python integration platform (sfi) of Stata 16, these commands provide hyper-parameters' optimal tuning via K-fold cross-validation using greed search. More specifically, they make use of the Python Scikit-learn API to carry out both cross-validation and outcome/label prediction.			arxiv	[]	9.0
